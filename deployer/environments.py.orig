# -*- coding: utf-8 -*-
#
# Copyright Veracode Inc., 2014
import logging
import os
from   deployer import aws
from   deployer import s3
from   deployer import utils
import deployer.terraform as tf
from   deployer.exceptions import ( EnvironmentExistsException,
                                    InvalidCommandException)

logger = logging.getLogger(os.path.basename('deployer'))


def _precheck(config, action):
    """
    Run through preflight checklist before running terraform apply/destroy.

    Args:
        config: dictionary containing all variable settings required
                to run terraform with

        action: string (create | destroy)

    Returns:
        Nothing

    Raises:
        InvalidCommandException exception on unknown command.
    """
    # validate env_name
    utils.validate_env_name(config['env_name'])
    tf_command = tf.validate()
    utils.run_command(tf_command, cwd=config['tf_root'])

    # Grab all the tf modules required
    tf_command = tf.get()
    utils.run_command(tf_command, cwd=config['tf_root'])

<<<<<<< HEAD
    # Don't push/pull remote state if we're just running plan.
    if not action == 'plan':
        # Instantiate remote state
        tf_command = tf.remote_state(config)
        utils.run_command(tf_command, cwd=tf_root)

        # Push remote state
        push_or_pull = {
            'create' : tf.remote_push,
            'destroy' : tf.remote_pull,
        }
        try:
            tf_command = push_or_pull[action]()
        except KeyError:
            raise InvalidCommandException("Invalid Command: {}".format(action))

        utils.run_command(tf_command, cwd=tf_root)
=======
    # Instantiate remote state
    tf_command = tf.remote_state(config)
    utils.run_command(tf_command, cwd=config['tf_root'])

    # Push remote state
    push_or_pull = {
        'create' : tf.remote_push,
        'destroy' : tf.remote_pull,
    }
    try:
        tf_command = push_or_pull[action]()
    except KeyError:
        raise InvalidCommandException("Invalid Command: {}".format(action))

    utils.run_command(tf_command, cwd=config['tf_root'])
>>>>>>> master

    # Run Plan
    tf_command = tf.plan(config)
    utils.run_command(tf_command, cwd=config['tf_root'])

    return


def plan(config):
    """
    Run 'terraform plan'.

    Args:
        config: dictionary containing all variable settings required
                to run terraform with

    Returns:
        True

    Raises:
        EnvironmentExistsException if environment already exists.
    """
    (repo, branch) = utils.parse_git_url(config['terraform'])
    tf_root = _precheck(config, repo, 'plan')
    return True
    

def create(config):
    """
    Create the environment by running 'terraform apply'.

    Args:
        config: dictionary containing all variable settings required
                to run terraform with

    Returns:
        True

    Raises:
        EnvironmentExistsException if environment already exists.
    """
    # Check if env already exists
    if aws.environment_exists(config):
        msg  = "\nAn environment with the name {} already exists."
        msg += "\nPlease tear it down before trying to rebuild."
        raise EnvironmentExistsException(msg.format(config['env_name']))

    _precheck(config, 'create')
    
    # Run Apply
    tf_command = tf.apply(config)
    logger.debug("Command: {}".format(" ".join(tf_command)))
    logger.debug("In: {}".format(config['tf_root']))
    utils.run_command(tf_command, cwd=config['tf_root'])

    return True


def destroy(config):
    """
    Destroy the environment by running 'terraform apply'.

    Args:
        config: dictionary containing all variable settings required
                to run terraform with

    Returns:
        True

    Raises:
        EnvironmentExistsException if environment does not exist.
    """

    # Check if env already exists
    if not aws.environment_exists(config):
        msg = "No such environment with the name {} exists."
        raise EnvironmentExistsException(msg.format(config['env_name']))

    tf_root = _precheck(config, 'destroy')

    # Run destroy
    tf_command = tf.destroy(config)
    utils.run_command(tf_command, cwd=config['tf_root'])

    # Destroy the per-environment S3 folder in
    s3.destroy_folder(config['project_config'],config['env_folder'])

    # Destroy the state file in S3
    s3.delete_object(config['tf_state_bucket'], config['tf_state'])

    return True


def output(config, tf_var):
    """
    Output the value of the specified variable.

    Args:
        config: dictionary containing all variable settings required
                to run terraform with

        tf_var: name of terraform output variable to return the output of.

    Returns:
        True

    """
    tf_command = tf.output(tf_var)
    utils.run_command(tf_command, cwd=config['tf_root'])

    return True
